
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 27 09:21:54 CST 2012
//----------------------------------------------------

package compiler.logc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import javax.swing.JTextArea;
import compiler.CeParseAttr;
import compiler.CeParseUtils;
import compiler.CeSymTable;
import dot.CeDotGraph;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 27 09:21:54 CST 2012
  */
public class C_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public C_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public C_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public C_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\045\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\002\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\011\005\000\002\011\004\000\002\042\006" +
    "\000\002\044\006\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\010\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\046\002\000\002\047\002\000\002" +
    "\015\014\000\002\017\003\000\002\017\002\000\002\020" +
    "\005\000\002\020\003\000\002\016\004\000\002\026\006" +
    "\000\002\027\003\000\002\027\002\000\002\030\003\000" +
    "\002\030\002\000\002\032\004\000\002\032\003\000\002" +
    "\031\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\005" +
    "\000\002\031\004\000\002\033\012\000\002\034\004\000" +
    "\002\034\003\000\002\034\003\000\002\034\002\000\002" +
    "\035\004\000\002\035\003\000\002\036\012\000\002\037" +
    "\006\000\002\040\011\000\002\041\017\000\002\043\007" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\005\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\030\002\001\003\001\004\001\012\001\013" +
    "\001\014\001\015\001\016\001\047\001\050\001\053\001" +
    "\001\002\000\030\002\ufffb\003\023\004\015\012\032\013" +
    "\027\014\030\015\007\016\031\047\021\050\025\053\022" +
    "\001\002\000\004\002\006\001\002\000\004\002\uffff\001" +
    "\002\000\004\004\uffe6\001\002\000\030\002\ufff9\003\ufff9" +
    "\004\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\047" +
    "\021\050\ufff9\053\ufff9\001\002\000\026\002\ufff2\003\ufff2" +
    "\004\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\050" +
    "\ufff2\053\ufff2\001\002\000\004\017\257\001\002\000\026" +
    "\002\ufff3\003\ufff3\004\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\050\ufff3\053\ufff3\001\002\000\026\002\ufffd" +
    "\003\023\004\015\012\032\013\027\014\030\015\007\016" +
    "\031\050\025\053\022\001\002\000\004\004\uffe3\001\002" +
    "\000\004\004\033\001\002\000\004\002\000\001\002\000" +
    "\026\002\ufff6\003\023\004\015\012\032\013\027\014\030" +
    "\015\007\016\031\050\025\053\022\001\002\000\030\002" +
    "\ufff8\003\ufff8\004\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\047\ufff8\050\ufff8\053\ufff8\001\002\000\004\004" +
    "\033\001\002\000\004\002\ufff5\001\002\000\026\002\ufff4" +
    "\003\ufff4\004\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\050\ufff4\053\ufff4\001\002\000\004\004\uffe4\001\002" +
    "\000\004\002\ufffc\001\002\000\004\004\uffe8\001\002\000" +
    "\004\004\uffe7\001\002\000\004\004\uffe5\001\002\000\004" +
    "\004\uffe9\001\002\000\052\017\uffea\020\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\uffea" +
    "\034\uffea\035\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\055\uffea\001\002\000\004\035\035" +
    "\001\002\000\034\004\042\012\032\013\027\014\030\015" +
    "\007\016\031\031\040\036\uffd1\050\025\051\052\052\050" +
    "\054\036\056\051\001\002\000\004\017\235\001\002\000" +
    "\004\022\232\001\002\000\004\033\203\001\002\000\004" +
    "\017\202\001\002\000\014\004\uffe3\020\uffea\022\uffea\033" +
    "\uffea\055\uffea\001\002\000\034\004\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\031\uffcb\036\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\054\uffcb\056\uffcb\001\002\000\004\036\uffd2" +
    "\001\002\000\004\004\033\001\002\000\034\004\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\031\uffc9\036\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\054\uffc9\056\uffc9\001\002\000" +
    "\004\036\177\001\002\000\004\033\171\001\002\000\020" +
    "\004\033\005\065\006\075\007\073\010\102\011\067\033" +
    "\076\001\002\000\004\033\147\001\002\000\034\004\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\031\uffcc\036" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\056\uffcc\001\002" +
    "\000\034\004\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\031\uffca\036\uffca\050\uffca\051\uffca\052\uffca\054\uffca" +
    "\056\uffca\001\002\000\034\004\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\031\uffcd\036\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\054\uffcd\056\uffcd\001\002\000\012\020\061\022" +
    "\uffeb\033\063\055\062\001\002\000\034\004\042\012\032" +
    "\013\027\014\030\015\007\016\031\031\040\036\uffcf\050" +
    "\025\051\052\052\050\054\036\056\051\001\002\000\004" +
    "\036\uffd0\001\002\000\004\004\033\001\002\000\004\004" +
    "\033\001\002\000\022\004\033\005\065\006\075\007\073" +
    "\010\102\011\067\033\076\034\uffd3\001\002\000\004\034" +
    "\143\001\002\000\044\017\uffe2\020\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\034\uffe2\037\uffe2\040" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\055\uffe2" +
    "\001\002\000\004\034\uffd4\001\002\000\044\017\uffde\020" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\034\uffde\037\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\055\uffde\001\002\000\044\017\uffaa\020\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\034" +
    "\uffaa\037\135\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\136\055\137\001\002\000\036\017\uffae\020\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\034\uffae" +
    "\040\131\042\uffae\043\uffae\044\130\045\127\001\002\000" +
    "\030\017\uffb2\020\uffb2\023\116\024\113\025\107\026\111" +
    "\027\114\030\115\034\uffb2\042\112\043\110\001\002\000" +
    "\044\017\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\034\uffe0\037\uffe0\040\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\055\uffe0\001\002\000\044" +
    "\017\uffa6\020\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\034\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\055\uffa6\001\002\000\044\017" +
    "\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\034\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\055\uffe1\001\002\000\020\004\033" +
    "\005\065\006\075\007\073\010\102\011\067\033\076\001" +
    "\002\000\044\017\uffa7\020\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\034\uffa7\037\uffa7\040\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\055\uffa7\001\002" +
    "\000\006\020\103\034\uffa4\001\002\000\046\017\uffa8\020" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\033\063\034\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\055\uffa8\001\002\000\044\017\uffdf" +
    "\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\034\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\055\uffdf\001\002\000\020\004\033\005" +
    "\065\006\075\007\073\010\102\011\067\033\076\001\002" +
    "\000\004\034\uffa5\001\002\000\004\034\106\001\002\000" +
    "\044\017\uffa9\020\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\034\uffa9\037\uffa9\040\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\055\uffa9\001\002\000\020" +
    "\004\033\005\065\006\075\007\073\010\102\011\067\033" +
    "\076\001\002\000\020\004\033\005\065\006\075\007\073" +
    "\010\102\011\067\033\076\001\002\000\020\004\033\005" +
    "\065\006\075\007\073\010\102\011\067\033\076\001\002" +
    "\000\020\004\033\005\065\006\075\007\073\010\102\011" +
    "\067\033\076\001\002\000\020\004\033\005\065\006\075" +
    "\007\073\010\102\011\067\033\076\001\002\000\020\004" +
    "\033\005\065\006\075\007\073\010\102\011\067\033\076" +
    "\001\002\000\020\004\033\005\065\006\075\007\073\010" +
    "\102\011\067\033\076\001\002\000\020\004\033\005\065" +
    "\006\075\007\073\010\102\011\067\033\076\001\002\000" +
    "\010\017\uffb8\020\uffb8\034\uffb8\001\002\000\010\017\uffb3" +
    "\020\uffb3\034\uffb3\001\002\000\010\017\uffb4\020\uffb4\034" +
    "\uffb4\001\002\000\010\017\uffb7\020\uffb7\034\uffb7\001\002" +
    "\000\010\017\uffba\020\uffba\034\uffba\001\002\000\010\017" +
    "\uffb5\020\uffb5\034\uffb5\001\002\000\010\017\uffb9\020\uffb9" +
    "\034\uffb9\001\002\000\010\017\uffb6\020\uffb6\034\uffb6\001" +
    "\002\000\020\004\033\005\065\006\075\007\073\010\102" +
    "\011\067\033\076\001\002\000\020\004\033\005\065\006" +
    "\075\007\073\010\102\011\067\033\076\001\002\000\020" +
    "\004\033\005\065\006\075\007\073\010\102\011\067\033" +
    "\076\001\002\000\030\017\uffaf\020\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\034\uffaf\042\uffaf\043" +
    "\uffaf\001\002\000\030\017\uffb0\020\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\034\uffb0\042\uffb0\043" +
    "\uffb0\001\002\000\030\017\uffb1\020\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\034\uffb1\042\uffb1\043" +
    "\uffb1\001\002\000\020\004\033\005\065\006\075\007\073" +
    "\010\102\011\067\033\076\001\002\000\020\004\033\005" +
    "\065\006\075\007\073\010\102\011\067\033\076\001\002" +
    "\000\020\004\033\005\065\006\075\007\073\010\102\011" +
    "\067\033\076\001\002\000\036\017\uffab\020\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\034\uffab\040" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\001\002\000\036" +
    "\017\uffad\020\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\034\uffad\040\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\001\002\000\036\017\uffac\020\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\034\uffac\040\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\001\002\000\044\017" +
    "\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\034\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\055\uffd5\001\002\000\006\017\uffed" +
    "\022\uffed\001\002\000\012\017\uffeb\020\061\022\uffeb\055" +
    "\062\001\002\000\006\017\uffec\022\uffec\001\002\000\020" +
    "\004\015\012\032\013\027\014\030\015\007\016\031\050" +
    "\025\001\002\000\004\017\155\001\002\000\004\004\033" +
    "\001\002\000\004\022\153\001\002\000\020\004\033\005" +
    "\065\006\075\007\073\010\102\011\067\033\076\001\002" +
    "\000\004\017\uffef\001\002\000\020\004\033\005\065\006" +
    "\075\007\073\010\102\011\067\033\076\001\002\000\004" +
    "\017\157\001\002\000\004\004\033\001\002\000\004\042" +
    "\161\001\002\000\004\042\162\001\002\000\004\034\163" +
    "\001\002\000\004\035\164\001\002\000\034\004\042\012" +
    "\032\013\027\014\030\015\007\016\031\031\040\036\uffd1" +
    "\050\025\051\052\052\050\054\036\056\051\001\002\000" +
    "\004\036\166\001\002\000\034\004\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\031\uffbc\036\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\056\uffbc\001\002\000\004\017\170" +
    "\001\002\000\034\004\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\031\uffc8\036\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\054\uffc8\056\uffc8\001\002\000\020\004\033\005\065\006" +
    "\075\007\073\010\102\011\067\033\076\001\002\000\004" +
    "\034\173\001\002\000\004\035\174\001\002\000\034\004" +
    "\042\012\032\013\027\014\030\015\007\016\031\031\040" +
    "\036\uffd1\050\025\051\052\052\050\054\036\056\051\001" +
    "\002\000\004\036\176\001\002\000\034\004\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\031\uffbd\036\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\056\uffbd\001\002\000\026" +
    "\002\uffbb\003\uffbb\004\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\050\uffbb\053\uffbb\001\002\000\006\017\201" +
    "\022\153\001\002\000\042\002\ufff1\003\ufff1\004\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\031\ufff1\036\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\056\ufff1\001" +
    "\002\000\034\004\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\031\uffce\036\uffce\050\uffce\051\uffce\052\uffce\054" +
    "\uffce\056\uffce\001\002\000\020\004\033\005\065\006\075" +
    "\007\073\010\102\011\067\033\076\001\002\000\004\034" +
    "\205\001\002\000\004\035\206\001\002\000\034\004\042" +
    "\012\032\013\027\014\030\015\007\016\031\031\040\036" +
    "\uffd1\050\025\051\052\052\050\054\036\056\051\001\002" +
    "\000\004\036\210\001\002\000\036\004\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\031\uffc2\032\214\036\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\054\uffc2\056\uffc2\001\002\000" +
    "\036\004\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\031\uffc0\032\uffc0\036\uffc0\050\uffc0\051\uffc0\052\uffc0\054" +
    "\uffc0\056\uffc0\001\002\000\034\004\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\031\uffc6\036\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\054\uffc6\056\uffc6\001\002\000\034\004\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\031\uffc3\036" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\056\uffc3\001\002" +
    "\000\006\031\220\035\221\001\002\000\036\004\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\031\uffc4\032\214" +
    "\036\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\001" +
    "\002\000\036\004\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\031\uffc1\032\uffc1\036\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\054\uffc1\056\uffc1\001\002\000\034\004\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\031\uffc5\036\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\054\uffc5\056\uffc5\001\002\000\004" +
    "\033\224\001\002\000\034\004\042\012\032\013\027\014" +
    "\030\015\007\016\031\031\040\036\uffd1\050\025\051\052" +
    "\052\050\054\036\056\051\001\002\000\004\036\223\001" +
    "\002\000\034\004\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\031\uffbe\036\uffbe\050\uffbe\051\uffbe\052\uffbe\054" +
    "\uffbe\056\uffbe\001\002\000\020\004\033\005\065\006\075" +
    "\007\073\010\102\011\067\033\076\001\002\000\004\034" +
    "\226\001\002\000\004\035\227\001\002\000\034\004\042" +
    "\012\032\013\027\014\030\015\007\016\031\031\040\036" +
    "\uffd1\050\025\051\052\052\050\054\036\056\051\001\002" +
    "\000\004\036\231\001\002\000\036\004\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\031\uffbf\032\uffbf\036\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf\001\002\000" +
    "\020\004\033\005\065\006\075\007\073\010\102\011\067" +
    "\033\076\001\002\000\004\017\234\001\002\000\034\004" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\031\uffee" +
    "\036\uffee\050\uffee\051\uffee\052\uffee\054\uffee\056\uffee\001" +
    "\002\000\034\004\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\031\uffc7\036\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\056\uffc7\001\002\000\004\002\ufff7\001\002\000\014" +
    "\017\uffeb\020\061\022\uffeb\033\uffdd\055\062\001\002\000" +
    "\004\033\241\001\002\000\022\004\015\012\032\013\027" +
    "\014\030\015\007\016\031\034\uffd9\050\025\001\002\000" +
    "\004\004\033\001\002\000\004\034\250\001\002\000\006" +
    "\020\246\034\uffd7\001\002\000\004\034\uffda\001\002\000" +
    "\020\004\015\012\032\013\027\014\030\015\007\016\031" +
    "\050\025\001\002\000\004\034\uffd8\001\002\000\004\035" +
    "\uffdc\001\002\000\004\035\252\001\002\000\034\004\042" +
    "\012\032\013\027\014\030\015\007\016\031\031\040\036" +
    "\uffd1\050\025\051\052\052\050\054\036\056\051\001\002" +
    "\000\004\036\254\001\002\000\026\002\uffdb\003\uffdb\004" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\050\uffdb" +
    "\053\uffdb\001\002\000\006\020\uffd6\034\uffd6\001\002\000" +
    "\004\002\ufffe\001\002\000\042\002\ufff0\003\ufff0\004\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\031\ufff0\036" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0" +
    "\001\002\000\026\002\ufffa\003\ufffa\004\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\050\ufffa\053\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\004\045\003\001\001\000\026\003" +
    "\016\004\025\005\017\007\015\011\023\013\013\014\007" +
    "\015\012\042\011\043\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\257\014\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\255\005\017\007\015\011\023\015\012" +
    "\042\011\043\010\001\001\000\002\001\001\000\006\010" +
    "\236\012\177\001\001\000\002\001\001\000\020\004\235" +
    "\005\017\007\015\011\023\015\012\042\011\043\010\001" +
    "\001\000\002\001\001\000\004\010\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\044\010\055\011\054\012\036\026\040\030\046" +
    "\031\056\032\043\033\042\040\053\041\045\042\011\044" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\144\012\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\076\010\100\021\166\022\071\023\070\024\067" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\044\010\055\011\054\012\036\026\040\031\056\032" +
    "\057\033\042\040\053\041\045\042\011\044\052\001\001" +
    "\000\002\001\001\000\006\010\144\012\145\001\001\000" +
    "\006\010\144\012\143\001\001\000\024\006\076\010\100" +
    "\021\077\022\071\023\070\024\067\025\065\026\073\027" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\076\010\100\021\104\022" +
    "\071\023\070\024\067\026\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\076\010\100\021\077\022\071\023\070\024\067" +
    "\025\103\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\076\010\100\021\125" +
    "\022\071\023\070\024\067\026\073\001\001\000\020\006" +
    "\076\010\100\021\124\022\071\023\070\024\067\026\073" +
    "\001\001\000\020\006\076\010\100\021\123\022\071\023" +
    "\070\024\067\026\073\001\001\000\020\006\076\010\100" +
    "\021\122\022\071\023\070\024\067\026\073\001\001\000" +
    "\020\006\076\010\100\021\121\022\071\023\070\024\067" +
    "\026\073\001\001\000\020\006\076\010\100\021\120\022" +
    "\071\023\070\024\067\026\073\001\001\000\020\006\076" +
    "\010\100\021\117\022\071\023\070\024\067\026\073\001" +
    "\001\000\020\006\076\010\100\021\116\022\071\023\070" +
    "\024\067\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\076\010\100\022\133\023\070\024\067\026\073" +
    "\001\001\000\016\006\076\010\100\022\132\023\070\024" +
    "\067\026\073\001\001\000\016\006\076\010\100\022\131" +
    "\023\070\024\067\026\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\076\010\100" +
    "\023\141\024\067\026\073\001\001\000\014\006\076\010" +
    "\100\023\140\024\067\026\073\001\001\000\014\006\076" +
    "\010\100\023\137\024\067\026\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\150\042\147\001\001\000\002\001\001\000\006" +
    "\010\144\012\151\001\001\000\002\001\001\000\020\006" +
    "\076\010\100\021\153\022\071\023\070\024\067\026\073" +
    "\001\001\000\002\001\001\000\020\006\076\010\100\021" +
    "\155\022\071\023\070\024\067\026\073\001\001\000\002" +
    "\001\001\000\004\010\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\044\010\055\011\054\012\036\026\040\030\164\031" +
    "\056\032\043\033\042\040\053\041\045\042\011\044\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\076\010\100\021\171" +
    "\022\071\023\070\024\067\026\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\044\010\055\011\054" +
    "\012\036\026\040\030\174\031\056\032\043\033\042\040" +
    "\053\041\045\042\011\044\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\076\010\100" +
    "\021\203\022\071\023\070\024\067\026\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\044\010\055" +
    "\011\054\012\036\026\040\030\206\031\056\032\043\033" +
    "\042\040\053\041\045\042\011\044\052\001\001\000\002" +
    "\001\001\000\012\034\211\035\214\036\210\037\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\215\037\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\044\010\055\011\054\012\036\026\040\030\221\031" +
    "\056\032\043\033\042\040\053\041\045\042\011\044\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\076\010\100\021\224\022\071\023\070\024\067\026\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\044\010\055\011\054\012\036\026\040\030\227\031\056" +
    "\032\043\033\042\040\053\041\045\042\011\044\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\076" +
    "\010\100\021\232\022\071\023\070\024\067\026\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\237\001\001\000\002\001" +
    "\001\000\012\007\241\016\243\017\242\020\244\001\001" +
    "\000\004\010\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\241\016\243\020\246" +
    "\001\001\000\002\001\001\000\004\047\250\001\001\000" +
    "\002\001\001\000\034\007\044\010\055\011\054\012\036" +
    "\026\040\030\252\031\056\032\043\033\042\040\053\041" +
    "\045\042\011\044\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$C_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$C_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$C_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/*************************
	 * gg
	 *************************/
	CeParseUtils utils;
	
	public void setUtils(CeParseUtils utils){
		this.utils=utils;
	}
	
	/*************************
	 * Styled document
	 *************************/
	 DefaultStyledDocument 	doc;
	 
	 public void setStyledDoc(DefaultStyledDocument doc){
		 this.doc=doc;
	 }
	 private void addFormat(Color color,boolean bold,boolean italic,boolean underline){
		SimpleAttributeSet 	sas	= new SimpleAttributeSet();
		
		//StyleConstants.setFontSize(sas, 22);
		StyleConstants.setForeground(sas, color);
		StyleConstants.setBold(sas, bold);
		StyleConstants.setItalic(sas, italic);
		StyleConstants.setUnderline(sas, underline);
		
		//doc.setCharacterAttributes(yychar, yylength(), sas, false);
	}
	/*************************
	 * Console
	 *************************/
	
	public void print(String text){
		this.utils.getConsole().print(text);
	}
	public void println(String text){
		this.utils.getConsole().println(text);
	}
	/*************************
	 * Errors
	 *************************/
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("[Error]");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1)+" value <"+s.value+">");
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
		println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$C_Parser$actions {



	/*************************
	 * Printing
	 *************************/
	void println(String msg){
		parser.println(msg);
	}
	void print(String msg){
		parser.print(msg);
	}
	/*************************
	 * Errors
	 *************************/
	void error(String msg, Object info){
		parser.report_error(msg,info);
	}
	/*************************
	 * Dot graph
	 *************************/
	
	CeDotGraph	g1	=	new CeDotGraph("g51","graphs/g51.dot");
	CeDotGraph	g2	=	new CeDotGraph("g52","graphs/g52.dot");
	
	String[]	except	=	{"item_id"};
	
	String getNextItemId(){
		return g2.getNextItemId();
	}
	String addItem(String label1,String label2){
		g1.addItem(label1);
		return g2.addItem(label2);
	}
	String addItem(String label){
		g1.addItem(label);
		return g2.addItem(label);
	}
	String addAssn(String from,String to){
		g1.addAssn(from,to);
		return g2.addAssn(from,to);
	}
	String addAssn2(String from,String to){
		return g2.addAssn(from,to);
	}
	String addAssn(String from,String to1,String to2){
		g1.addAssn(from,to1);
		return g2.addAssn(from,to2);
	}
	String addOther(String other){
		g1.addOther(other);
		return g2.addOther(other);
	}
	void createGraphs() throws java.io.IOException{
		g1.getGraphImg();
		g2.getGraphImg();
		println(String.format("Files created on /%S dir...",g1.getDotfile().getParent()));
	}
	//dfsdf
	Stack<String>	context	=	new Stack<>();

  private final C_Parser parser;

  /** Constructor */
  CUP$C_Parser$actions(C_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$C_Parser$do_action(
    int                        CUP$C_Parser$act_num,
    java_cup.runtime.lr_parser CUP$C_Parser$parser,
    java.util.Stack            CUP$C_Parser$stack,
    int                        CUP$C_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$C_Parser$result;

      /* select the action based on the action number */
      switch (CUP$C_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_list ::= expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr_list",19, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_list ::= expr COMA expr_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr_list",19, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr3 ::= function_call 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr3 ::= var_data 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr3 ::= var 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr3 ::= PAR1 expr PAR2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr3",18, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr2 ::= expr3 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr2 ::= expr3 ARROW expr2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr2 ::= expr3 AND expr2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr2 ::= expr3 EXP expr2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr2",17, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr1 ::= expr2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr1",16, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr1 ::= expr2 OR expr1 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr1",16, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr1 ::= expr2 DIV expr1 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr1",16, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr1 ::= expr2 MUL expr1 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr1",16, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr1 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr1 MENOR_EQQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr1 MAYOR_EQQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr1 MENORQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr1 MAYORQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr1 NEQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr1 EQEQ expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr1 SUB expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr1 PLUS expr 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // struct_def ::= KW_STRUCT var LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("struct_def",33, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-4)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for_struct ::= KW_FOR PAR1 var_def_2 SEMIC expr SEMIC var PLUS PLUS PAR2 LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("for_struct",31, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-12)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // while_struct ::= KW_WHILE PAR1 expr PAR2 LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("while_struct",30, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_else ::= KW_ELSE LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_else",29, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_elseif ::= KW_ELSE KW_IF PAR1 expr PAR2 LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_elseif",28, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_elseif_list ::= if_elseif 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_elseif_list",27, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_elseif_list ::= if_elseif_list if_elseif 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_elseif_list",27, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_struct1 ::= 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",26, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_struct1 ::= if_else 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",26, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_struct1 ::= if_elseif_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",26, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_struct1 ::= if_elseif_list if_else 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",26, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_struct ::= KW_IF PAR1 expr PAR2 LLAVE1 stmts LLAVE2 if_struct1 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("if_struct",25, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-7)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= KW_BREAK SEMIC 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= KW_RETURN expr SEMIC 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= for_struct 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= while_struct 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= if_struct 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= var_set 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= var_def 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= function_call SEMIC 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt_list ::= stmt 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",24, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt_list ::= stmt stmt_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",24, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmts ::= 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmts",22, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= stmt_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("stmts",22, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_params1 ::= 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_params1",21, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_params1 ::= expr_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_params1",21, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_call ::= var PAR1 function_params1 PAR2 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_call",20, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_param ::= var_type var 
            {
              CeParseAttr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
							x.set("type",t.get("type"));
							try {
								CeSymTable.Item item=parser.utils.getSymTable("symtable").addParameter(x.getString("name"), x.getString("type"),context.peek(), 0);
								x.set("item",item);
							} catch (Exception exc) {
								error(exc.getMessage(),x.get("info"));
							}
							RESULT =x;
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_param",12, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_param_list ::= function_param 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
							Set<CeSymTable.Item>	list	=	new HashSet<>();
							if(x.get("item")!=null)
								list.add((CeSymTable.Item)x.get("item"));
							x.set("item_list",list);
							RESULT=x;
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_param_list",14, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_param_list ::= function_param COMA function_param_list 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr l = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
							((Set<CeSymTable.Item>)l.get("item_list")).add((CeSymTable.Item)x.get("item"));
							RESULT=l;
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_param_list",14, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_params ::= 
            {
              CeParseAttr RESULT =null;
		
							CeParseAttr attr=new CeParseAttr();
							attr.set("item_list",new HashSet<CeSymTable.Item>());
							
							RESULT=attr;
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_params",13, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_params ::= function_param_list 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
							RESULT=x;
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_params",13, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_def ::= var_type var NT$1 PAR1 function_params PAR2 NT$2 LLAVE1 stmts LLAVE2 
            {
              CeParseAttr RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (CeParseAttr) ((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-9)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-8)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).right;
		CeParseAttr l = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).value;
		
							context.pop();
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("function_def",11, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-9)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              CeParseAttr RESULT =(CeParseAttr) ((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-4)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr l = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;

							try {
								CeSymTable.Item item=parser.utils.getSymTable("symtable").addFunction(x.getString("name"), t.getString("type"),context.peek(), 0,((Set<CeSymTable.Item>)l.get("item_list")));
								
							} catch (Exception exc) {
								error(exc.getMessage(),x.get("info"));
							}
						
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            {
              CeParseAttr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
context.push(x.getString("name"));
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_data ::= BOOLEAN 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_data",4, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_data ::= CHAR 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_data",4, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_data ::= STRING 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_data",4, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_data ::= DOUBLE 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_data",4, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_data ::= INT 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_data",4, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_type ::= ID 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",x);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_type ::= KW_VOID 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_VOID);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_type ::= KW_BOOLEAN 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_BOOLEAN);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_type ::= KW_CHAR 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_CHAR);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_type ::= KW_STRING 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_INT);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_type ::= KW_DOUBLE 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_DOUBLE);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_type ::= KW_INT 
            {
              CeParseAttr RESULT =null;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("type",CeSymTable.TYPE_INT);
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_type",5, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= ID 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						CeParseAttr	attr= new CeParseAttr();
						attr.set("name",x);
						attr.set("info",CUP$C_Parser$stack.peek());
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_list ::= var 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						CeParseAttr	attr= new CeParseAttr();
						
						ArrayList<CeParseAttr>	list	=	new ArrayList<>();
						list.add(x);
						
						attr.set("list",list);
						
						RESULT=	attr;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_list ::= var COMA var_list 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr l = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						l.getList("list").add(x);
						l.set("is_struct",false);
						RESULT	=	l;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_list ::= var ARROW var_list 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr l = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						l.getList("list").add(x);
						l.set("is_struct",true);
						RESULT	=	l;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_set ::= var_list EQ expr SEMIC 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_set",34, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_def_2 ::= var_type var_list EQ expr 
            {
              CeParseAttr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).value;
		
						x.set("type",t.getString("type"));
						RESULT	=	x;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_def_2",32, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_def ::= var_def_2 SEMIC 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		
						RESULT=x;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_def",7, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_def ::= var_type var_list SEMIC 
            {
              CeParseAttr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).right;
		CeParseAttr t = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		
						x.set("type",t.getString("type"));
						RESULT	=	x;
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("var_def",7, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def ::= struct_def 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def ::= function_def 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def ::= var_def 
            {
              CeParseAttr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()).right;
		CeParseAttr x = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.peek()).value;
		
						try {
							parser.utils.getSymTable("symtable").addGlobalVar(x.getList("lista").get(0).getString("name"), x.getString("type"),context.peek(), 0);
						} catch (Exception exc) {
							error(exc.getMessage(),x.get("info"));
						}
						//println(x.toString());
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_list ::= error 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def_list",2, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_list ::= def 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def_list",2, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_list ::= def def_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("def_list",2, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // include ::= KW_INCLUDE 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("include",10, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // include_list ::= include 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("include_list",9, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // include_list ::= include include_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("include_list",9, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // input ::= 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // input ::= def_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // input ::= include_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= include_list def_list 
            {
              CeParseAttr RESULT =null;

              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).right;
		CeParseAttr start_val = (CeParseAttr)((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		RESULT = start_val;
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$C_Parser$parser.done_parsing();
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // app ::= NT$0 input 
            {
              CeParseAttr RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (CeParseAttr) ((java_cup.runtime.Symbol) CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)).value;
		
						context.pop();
						println("..........................");
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.elementAt(CUP$C_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              CeParseAttr RESULT =null;

						println("c.........................");
						context.push(parser.utils.getFile().getName());
					
              CUP$C_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$C_Parser$stack.peek()), RESULT);
            }
          return CUP$C_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

