
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 12 23:15:52 CST 2012
//----------------------------------------------------

package compiler.logl;

import java.util.HashMap;
import javax.swing.JTextArea;
import compiler.CeParseAttr;
import dot.CeDotGraph;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 12 23:15:52 CST 2012
  */
public class L_Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public L_Parser() {super();}

  /** Constructor which sets the default scanner. */
  public L_Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public L_Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\103\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\004\000\002\006\005\000" +
    "\002\006\003\000\002\016\004\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\077\004\000\002\077" +
    "\005\000\002\076\005\000\002\011\005\000\002\011\003" +
    "\000\002\020\005\000\002\020\003\000\002\012\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\033\005\000\002\033" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\006\000\002\073\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\004\000\002\073\004\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\005\000\002\074\006\000\002\013\014" +
    "\000\002\022\003\000\002\022\002\000\002\050\003\000" +
    "\002\050\002\000\002\021\006\000\002\055\003\000\002" +
    "\055\002\000\002\007\004\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\060\014\000\002\064\004" +
    "\000\002\064\003\000\002\066\004\000\002\066\003\000" +
    "\002\065\011\000\002\067\006\000\002\067\002\000\002" +
    "\101\003\000\002\075\003\000\002\100\003\000\002\057" +
    "\003\000\002\070\003\000\002\071\003\000\002\056\003" +
    "\000\002\043\003\000\002\044\003\000\002\026\003\000" +
    "\002\027\003\000\002\042\003\000\002\030\003\000\002" +
    "\051\003\000\002\052\003\000\002\053\003\000\002\041" +
    "\003\000\002\045\003\000\002\046\003\000\002\047\003" +
    "\000\002\023\003\000\002\032\003\000\002\024\003\000" +
    "\002\025\003\000\002\031\003\000\002\054\003\000\002" +
    "\061\003\000\002\062\003\000\002\063\003\000\002\015" +
    "\003\000\002\034\003\000\002\036\003\000\002\035\003" +
    "\000\002\040\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\006\001\012\001\047\001\001\002\000" +
    "\010\006\020\012\016\047\014\001\002\000\004\002\006" +
    "\001\002\000\004\002\uffff\001\002\000\004\005\026\001" +
    "\002\000\010\006\ufffb\012\ufffb\047\ufffb\001\002\000\004" +
    "\051\034\001\002\000\004\002\000\001\002\000\010\002" +
    "\ufff6\012\ufff6\047\ufff6\001\002\000\004\005\uffb2\001\002" +
    "\000\010\002\ufffd\012\016\047\014\001\002\000\032\004" +
    "\uffa4\005\uffa4\007\uffa4\012\uffa4\013\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\025\uffa4\041\uffa4\050\uffa4\051\uffa4\001\002\000" +
    "\010\002\ufff4\012\ufff4\047\ufff4\001\002\000\004\005\026" +
    "\001\002\000\010\002\ufff5\012\ufff5\047\ufff5\001\002\000" +
    "\010\006\020\012\016\047\014\001\002\000\010\006\ufffc" +
    "\012\ufffc\047\ufffc\001\002\000\010\002\ufffe\012\016\047" +
    "\014\001\002\000\010\002\ufff7\012\ufff7\047\ufff7\001\002" +
    "\000\032\002\uff97\004\uff97\006\uff97\007\uff97\012\uff97\013" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\041\uff97\047\uff97" +
    "\001\002\000\012\006\ufffa\012\ufffa\017\032\047\ufffa\001" +
    "\002\000\012\006\ufff8\012\ufff8\017\ufff8\047\ufff8\001\002" +
    "\000\004\005\026\001\002\000\004\005\uffa5\001\002\000" +
    "\012\006\ufff9\012\ufff9\017\ufff9\047\ufff9\001\002\000\004" +
    "\005\uffb4\001\002\000\004\005\026\001\002\000\004\012" +
    "\016\001\002\000\006\007\040\013\uffc4\001\002\000\012" +
    "\012\uffec\013\uffec\043\uffec\050\uffec\001\002\000\004\013" +
    "\050\001\002\000\006\013\uffc5\043\045\001\002\000\006" +
    "\013\uffed\043\uffed\001\002\000\004\007\040\001\002\000" +
    "\020\004\uffa7\007\uffa7\012\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\041\uffa7\001\002\000\006\013\uffee\043\uffee\001\002\000" +
    "\004\012\016\001\002\000\016\002\uffa3\012\uffa3\013\uffa3" +
    "\043\uffa3\047\uffa3\050\uffa3\001\002\000\010\012\016\013" +
    "\uffc6\050\054\001\002\000\004\013\050\001\002\000\004" +
    "\005\026\001\002\000\004\005\uffb3\001\002\000\004\005" +
    "\026\001\002\000\010\012\uffbf\013\uffbf\050\uffbf\001\002" +
    "\000\010\012\uffbe\013\uffbe\050\uffbe\001\002\000\010\012" +
    "\uffbd\013\uffbd\050\uffbd\001\002\000\010\012\016\013\uffc7" +
    "\050\054\001\002\000\010\012\uffc0\013\uffc0\050\uffc0\001" +
    "\002\000\020\004\065\007\040\012\016\020\074\021\070" +
    "\022\067\041\102\001\002\000\016\002\uffe9\012\uffe9\013" +
    "\uffe9\043\uffe9\047\uffe9\050\uffe9\001\002\000\016\002\uff96" +
    "\012\uff96\013\uff96\043\uff96\047\uff96\050\uff96\001\002\000" +
    "\024\004\065\005\026\007\040\012\016\020\074\021\070" +
    "\022\067\025\105\041\102\001\002\000\016\002\uff92\012" +
    "\uff92\013\uff92\043\uff92\047\uff92\050\uff92\001\002\000\016" +
    "\002\uff93\012\uff93\013\uff93\043\uff93\047\uff93\050\uff93\001" +
    "\002\000\016\002\uffeb\012\uffeb\013\uffeb\043\uffeb\047\uffeb" +
    "\050\uffeb\001\002\000\012\012\uffe4\013\uffe4\043\uffe4\050" +
    "\uffe4\001\002\000\016\002\uffe8\012\uffe8\013\uffe8\043\uffe8" +
    "\047\uffe8\050\uffe8\001\002\000\016\002\uff95\012\uff95\013" +
    "\uff95\043\uff95\047\uff95\050\uff95\001\002\000\010\012\ufff1" +
    "\013\ufff1\050\ufff1\001\002\000\012\012\uffe2\013\uffe2\043" +
    "\uffe2\050\uffe2\001\002\000\016\002\uffea\012\uffea\013\uffea" +
    "\043\uffea\047\uffea\050\uffea\001\002\000\016\002\uffe7\012" +
    "\uffe7\013\uffe7\043\uffe7\047\uffe7\050\uffe7\001\002\000\012" +
    "\012\uffe3\013\uffe3\043\uffe3\050\uffe3\001\002\000\016\002" +
    "\uff94\012\uff94\013\uff94\043\uff94\047\uff94\050\uff94\001\002" +
    "\000\004\013\050\001\002\000\020\004\065\007\040\012" +
    "\016\020\074\021\070\022\067\041\102\001\002\000\020" +
    "\004\uff98\007\uff98\012\uff98\020\uff98\021\uff98\022\uff98\041" +
    "\uff98\001\002\000\022\004\065\007\040\012\016\013\uffc1" +
    "\020\074\021\070\022\067\041\102\001\002\000\006\013" +
    "\uffe5\043\uffe5\001\002\000\006\013\uffc2\043\045\001\002" +
    "\000\004\013\050\001\002\000\012\012\uffc3\013\uffc3\043" +
    "\uffc3\050\uffc3\001\002\000\020\004\065\007\040\012\016" +
    "\020\074\021\070\022\067\041\102\001\002\000\006\013" +
    "\uffe6\043\uffe6\001\002\000\004\013\050\001\002\000\012" +
    "\012\uffe0\013\uffe0\043\uffe0\050\uffe0\001\002\000\012\012" +
    "\uffe1\013\uffe1\043\uffe1\050\uffe1\001\002\000\004\013\050" +
    "\001\002\000\010\002\uffc8\012\uffc8\047\uffc8\001\002\000" +
    "\022\002\ufff3\004\065\012\ufff3\020\074\021\070\022\067" +
    "\041\102\047\ufff3\001\002\000\010\002\ufff2\012\ufff2\047" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\006\002\004\103\003\001\001\000\024\003" +
    "\011\004\021\005\007\013\016\016\014\017\012\041\010" +
    "\077\020\100\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\121\001\001\000\002\001\001\000\004" +
    "\101\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\016\017\024\041\010\077\020" +
    "\100\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\026\015\027\001\001\000\002\001\001\000\020" +
    "\005\022\013\016\016\023\017\012\041\010\077\020\100" +
    "\006\001\001\000\002\001\001\000\014\013\016\017\024" +
    "\041\010\077\020\100\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\030\001\001\000\002\001\001" +
    "\000\004\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\035\001\001\000\004" +
    "\041\036\001\001\000\010\012\042\020\041\050\040\001" +
    "\001\000\002\001\001\000\004\045\046\001\001\000\004" +
    "\051\043\001\001\000\002\001\001\000\004\012\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\050" +
    "\001\001\000\002\001\001\000\020\007\060\010\055\021" +
    "\056\022\051\041\052\075\054\076\057\001\001\000\004" +
    "\045\117\001\001\000\004\015\105\001\001\000\002\001" +
    "\001\000\004\015\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\061\021\056\041" +
    "\052\075\054\076\057\001\001\000\002\001\001\000\026" +
    "\012\100\014\074\021\071\034\070\035\063\036\076\037" +
    "\077\040\072\041\065\102\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\012\100\014\102\015\105\021" +
    "\071\034\070\035\063\036\076\037\077\040\072\041\065" +
    "\063\103\102\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\116\001\001\000\026\012\100\014" +
    "\114\021\071\034\070\035\063\036\076\037\077\040\072" +
    "\041\065\102\075\001\001\000\002\001\001\000\032\012" +
    "\100\014\106\021\071\033\107\034\070\035\063\036\076" +
    "\037\077\040\072\041\065\055\110\102\075\001\001\000" +
    "\002\001\001\000\004\051\112\001\001\000\004\045\111" +
    "\001\001\000\002\001\001\000\026\012\100\014\113\021" +
    "\071\034\070\035\063\036\076\037\077\040\072\041\065" +
    "\102\075\001\001\000\002\001\001\000\004\045\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\120" +
    "\001\001\000\002\001\001\000\016\034\070\035\063\036" +
    "\076\037\077\040\072\102\122\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$L_Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$L_Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$L_Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/*************************
	 * Console
	 *************************/
	JTextArea console=new JTextArea();
	public void setConsole(JTextArea console){
		this.console=console;
	}
	public JTextArea getConsole(){
		return this.console;
	}
	public void print(String text){
		this.console.append(text);
	}
	public void println(String text){
		this.print(text+"\n");
	}
	/*************************
	 * Errors
	 *************************/
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("[Error]");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1)+" value <"+s.value+">");
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        //System.err.println(m);
		console.append(m+"\n");
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$L_Parser$actions {



	/*************************
	 * Printing
	 *************************/
	void println(String msg){
		parser.println(msg);
	}
	void print(String msg){
		parser.print(msg);
	}
	/*************************
	 * Errors
	 *************************/
	void error(String msg, Object info){
		parser.report_error(msg,info);
	}
	/*************************
	 * Dot graph
	 *************************/
	
	CeDotGraph	g1	=	new CeDotGraph("g51","graphs/g51.dot");
	CeDotGraph	g2	=	new CeDotGraph("g52","graphs/g52.dot");
	
	String[]	except	=	{"item_id"};
	
	String getNextItemId(){
		return g2.getNextItemId();
	}
	String addItem(String label1,String label2){
		g1.addItem(label1);
		return g2.addItem(label2);
	}
	String addItem(String label){
		g1.addItem(label);
		return g2.addItem(label);
	}
	String addAssn(String from,String to){
		g1.addAssn(from,to);
		return g2.addAssn(from,to);
	}
	String addAssn2(String from,String to){
		return g2.addAssn(from,to);
	}
	String addAssn(String from,String to1,String to2){
		g1.addAssn(from,to1);
		return g2.addAssn(from,to2);
	}
	String addOther(String other){
		g1.addOther(other);
		return g2.addOther(other);
	}
	void createGraphs() throws java.io.IOException{
		g1.getGraphImg();
		g2.getGraphImg();
		println(String.format("Files created on /%S dir...",g1.getDotfile().getParent()));
	}

  private final L_Parser parser;

  /** Constructor */
  CUP$L_Parser$actions(L_Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$L_Parser$do_action(
    int                        CUP$L_Parser$act_num,
    java_cup.runtime.lr_parser CUP$L_Parser$parser,
    java.util.Stack            CUP$L_Parser$stack,
    int                        CUP$L_Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$L_Parser$result;

      /* select the action based on the action number */
      switch (CUP$L_Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // boolean ::= BOOLEAN 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("boolean",29, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // string ::= STRING 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("string",30, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // char ::= CHAR 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("char",27, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // double ::= DOUBLE 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("double",28, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // int ::= INT 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("int",26, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // id ::= ID 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // not ::= NOT 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("not",49, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // or ::= OR 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("or",48, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // and ::= AND 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("and",47, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exponent ::= EXP 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("exponent",42, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mul ::= MUL 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("mul",23, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // div ::= DIV 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("div",19, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sub ::= SUB 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("sub",18, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // plus ::= PLUS 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("plus",24, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call ::= CALL 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("call",17, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // llave2 ::= LLAVE2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("llave2",37, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llave1 ::= LLAVE1 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("llave1",36, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // par2 ::= PAR2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("par2",35, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // par1 ::= PAR1 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("par1",31, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dot ::= DOT 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("dot",41, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // semic ::= SEMIC 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("semic",40, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // colon ::= COLON 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("colon",39, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mayor_equalq ::= MAYOR_EQUALQ 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("mayor_equalq",22, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // menor_equalq ::= MENOR_EQUALQ 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("menor_equalq",32, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // menorq ::= MENORQ 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("menorq",21, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // mayorq ::= MAYORQ 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("mayorq",20, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dequal ::= DEQUAL 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("dequal",34, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // nequal ::= NEQUAL 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("nequal",33, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // equal ::= EQUAL 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("equal",44, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else ::= RW_ELSE 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("else",55, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elseif ::= RW_ELSEIF 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("elseif",54, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if ::= RW_IF 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if",45, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // defparameter ::= RW_DEFPARAMETER 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("defparameter",62, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // setf ::= RW_SETF 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("setf",59, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // defun ::= RW_DEFUN 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("defun",63, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_struct3 ::= 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct3",53, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_struct3 ::= par1 else function_body par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct3",53, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_struct2 ::= par1 elseif par1 expr par2 function_body par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct2",51, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-6)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_elseif_list ::= if_struct2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_elseif_list",52, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_elseif_list ::= if_elseif_list if_struct2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_elseif_list",52, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_struct1 ::= if_struct3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",50, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_struct1 ::= if_elseif_list if_struct3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct1",50, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_struct ::= par1 if par1 expr par2 llave1 function_body llave2 par2 if_struct1 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("if_struct",46, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-9)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= var_global_set 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= function_call 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt_list ::= stmt 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt_list ::= stmt_list stmt 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",5, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_call_param ::= 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_call_param",43, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_call_param ::= expr_list 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_call_param",43, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_call ::= par1 id function_call_param par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_call",15, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_param ::= 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_param",38, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_param ::= var_list 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_param",38, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_body ::= 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_body ::= stmt_list 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_body",16, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_def ::= par1 defun id par1 function_param par2 par1 function_body par2 par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("function_def",9, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-9)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr3 ::= par1 not expr par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr3 ::= par1 expr par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr3 ::= boolean 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr3 ::= string 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr3 ::= char 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr3 ::= double 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr3 ::= int 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr3 ::= id 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr3 ::= function_call 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr3",58, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr2 ::= menor_equalq expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr2 ::= mayor_equalq expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr2 ::= menorq expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr2 ::= mayorq expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr2 ::= nequal expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr2 ::= dequal expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr2 ::= and expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr2 ::= or expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr2 ::= exponent expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr2 ::= mul expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr2 ::= div expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr2 ::= plus expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr2 ::= sub expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr2 ::= expr2 expr3 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr2",57, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= par1 not expr par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-3)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= par1 expr par2 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= var_type 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= var 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= function_call 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr",10, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_list ::= expr 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr_list",25, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_list ::= expr_list colon expr 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("expr_list",25, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_type ::= boolean 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_type",64, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_type ::= string 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_type",64, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_type ::= char 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_type",64, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_type ::= double 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_type",64, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_type ::= int 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_type",64, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= VAR 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_list ::= var 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_list ::= var_list colon var 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_def ::= var 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_def",7, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_def ::= var equal expr 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_def",7, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_global_set ::= setf id expr 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_global_set",60, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_global_def ::= defparameter id var_type 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_global_def",61, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_global_def ::= defparameter id 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("var_global_def",61, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def ::= function_def 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("def",13, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def ::= var_global_def 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("def",13, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_list ::= def 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("def_list",12, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_list ::= def_list def 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("def_list",12, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // include_filename ::= id 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("include_filename",4, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // include_filename ::= include_filename dot id 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("include_filename",4, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-2)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // include ::= RW_INCLUDE include_filename 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("include",3, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // include_list ::= include 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("include_list",2, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // include_list ::= include_list include 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("include_list",2, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // p ::= def_list 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // p ::= include_list def_list 
            {
              CeParseAttr RESULT =null;

              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("p",1, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)).right;
		CeParseAttr start_val = (CeParseAttr)((java_cup.runtime.Symbol) CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)).value;
		RESULT = start_val;
              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$L_Parser$parser.done_parsing();
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= NT$0 p 
            {
              CeParseAttr RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (CeParseAttr) ((java_cup.runtime.Symbol) CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)).value;
		println("..........................");
              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.elementAt(CUP$L_Parser$top-1)), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              CeParseAttr RESULT =null;
println("p.........................");
              CUP$L_Parser$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$L_Parser$stack.peek()), RESULT);
            }
          return CUP$L_Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

